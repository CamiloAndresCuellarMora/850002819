# -*- coding: utf-8 -*-
"""Hotel final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewPsnYjm1XHeqsu9Fk7zigaspPHsabBw
"""

#Hotel management system  final code

# File Name: LHMS_Studentid.py
# Author: Camilo Andres Cuellar Mora
# Description: This is a code  for a simple hotel management system that allows adding, deleting, and allocating rooms.
# Date: 2024-11-25


from datetime import datetime

class HotelManagementSystem:
    def __init__(self):
        self.rooms = {}  # Dictionary to store Room details
        self.allocations = {}  # Dictionary to store Room allocations
        self.file_name = "LHMS_Studentid.txt" #Fila to save data
        self.backup_file_name = "LHMS_Studentid_Backup_{}.txt" #Template for backup file name

    def add_room(self, room_number, features):
      # Funtion to add new room
      try:
        if room_number in self.rooms:
            print(f"Room {room_number} exists")
        else:
          if not features or not isinstance(features, str):
            raise ValueError("Invalid features. Please provide a non-empty string of features.")
          self.rooms[room_number] = features
          print(f"Room {room_number} added")
      except ValueError as ve:
        print(ve)

    def delete_room(self, room_number):
      # Funtion to delete room
      try:
        if room_number in self.rooms:
            del self.rooms[room_number]
            print(f"Room {room_number} deleted")
        else:
            raise KeyError(f"Room {room_number} does not exist")
      except KeyError as ke:
        print(ke)

    def display_rooms(self):
      # Funtion to display features before booking
        if not self.rooms:
            print("No rooms available")
            return
        print("Available Rooms:")
        for room_number, features in self.rooms.items():
            print(f"Room {room_number}: {features}")

    def allocate_room(self, room_number, customer_name):
      #Funtion to booking room
      try:
        if room_number in self.rooms and room_number not in self.allocations:
          self.allocations[room_number] = customer_name
          print(f"Room {room_number} allocated to {customer_name}")
        else:
          raise Exception(f"Room {room_number} is not available")
      except Exception as e:
        print(e)


    def display_allocations(self):
       #Funtion to display allocations status
        if not self.allocations:
            print("No rooms are currently allocated")
            return
        print("Room allocations:")
        for room_number, customer_name in self.allocations.items():
            print(f"Room {room_number} is allocated to {customer_name}")

    def billing_and_deallocation(self, room_number):
      #Funtion to bill and deallocation to customer
      try:
        if room_number in self.allocations:
            customer_name = self.allocations[room_number]
            billing_amount = self.calculate_billing(room_number)  # Calculate billing based on room features
            print(f"Billing {customer_name} for room {room_number} amounting to ${billing_amount}.")
            del self.allocations[room_number]
            print(f"Room {room_number} has been de-allocated.")
        else:
          raise Exception(f"Room {room_number} is not allocated.")
      except Exception as e:
        print(e)

    def calculate_billing(self, room_number):
      # Billing logic based on room features
      try:
        features = self.rooms[room_number]
        base_rate = 100  # Base rate for room
        if "deluxe" in features.lower():
            return base_rate + 50  # Additional charge for deluxe rooms
        return base_rate
      except KeyError:
        print(f"Room {room_number} does not exist.")
        return 0

    def save_data(self):
      #Funtion to save data on file
        if not self.rooms:
            print("No data to save")
            return
        try:
            with open(self.file_name, "w") as file:
                for room_number, features in self.rooms.items():
                    file.write(f"{room_number},{features}\n")
            print(f"Data saved to {self.file_name}")
        except IOError as e:
            print(f"Error saving data: {e}")

    def show_data(self):
      #Funtion to show data from file
        try:
            with open(self.file_name, "r") as file:
                content = file.read()
                if not content.strip():
                    print("The file is empty.")
                    return
                print(content)
        except FileNotFoundError:
            print(f"File {self.file_name} not found")
        except IOError as e:
            print(f"Error reading data: {e}")

    def backup_data(self):
      #Funtion to backup data to file
        if not self.rooms:
          print ("no rooms available to backup")
          return
        try:
            with open(self.file_name, "r") as file:
                content = file.read()
            current_date_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            backup_file_name = self.backup_file_name.format(current_date_time)
            with open(backup_file_name, "w") as backup_file:
                backup_file.write(content)
            print(f"Data backed up to {backup_file_name}")
        except FileNotFoundError:
            print(f"File {self.file_name} not found")
        except Exception as e:
            print(f"Error backing up data: {e}")

    def run(self):
      #Funtions to run the app
        while True:
            print("\nHotel Management System")
            print("1. Add Room")
            print("2. Delete Room")
            print("3. Display Room Details")
            print("4. Allocate Rooms")
            print("5. Display Room Allocations Details")
            print("6. Billing and De-allocation")
            print("7. Save Data")
            print("8. Show Data")
            print("9. Backup Data")
            print("0. Exit Application")
            choice = input("Enter your choice: ")

            if choice == "1":
              room_number = input("Enter room number: ")
              if not room_number.strip():  # Check if room_number is empty
                print("Invalid room number. Please enter a valid number.")
                continue
              features = input("Enter room features: ")
              self.add_room(room_number, features)
            elif choice == "2":
              room_number = input("Enter room number to delete: ")
              if not room_number.strip():  # Check if room_number is empty
                print("Invalid room number. Please enter a valid number.")
                continue
              self.delete_room(room_number)
            elif choice == "3":
              self.display_rooms()
            elif choice == "4":
             room_number = input("Enter room number to allocate: ")
             if not room_number.strip():  # Check if room_number is empty
                print("Invalid room number. Please enter a valid number.")
                continue
             customer_name = input("Enter customer name: ")
             if not customer_name.strip():  # Check if customer_name is empty
                print("Invalid customer name. Please enter a valid name.")
                continue
             self.allocate_room(room_number, customer_name)
            elif choice == "5":
              self.display_allocations()
            elif choice == "6":
              room_number = input("Enter room number for billing: ")
              if not room_number.strip():  # Check if room_number is empty
                print("Invalid room number. Please enter a valid number.")
                continue
              self.billing_and_deallocation(room_number)
            elif choice == "7":
              self.save_data()
            elif choice == "8":
              self.show_data()
            elif choice == "9":
              self.backup_data()
            elif choice == "0":
              print("Exiting application")
              break
            else:
              print("Invalid choice. Please try again.")
# Run app
if __name__ == "__main__":
    hotel_management_system = HotelManagementSystem()
    hotel_management_system.run()
